Java structure:
Static utility class (likely not needed due to Rust not being a strictly object-oriented language
Object encapsulating terminal position management
Object encapsulating terminal color management
Color class (Rust enums would be *great* here)
Preset values for Color
Object encapsulating interaction with stdin/read api
Main draw loop

TODO:
Terminal struct
    [DONE] Position management modular component
    [DONE] Color management modular component
    Data structure for screen
    Drawing routine
    Non-blocking read modular component (?)
Cube draw helper
    Creates and uses terminal struct internally
    Includes methods for drawing lines, and giving them specified heights
    Debug modular component (work this one out in Java first?)
Main loop
    Draws using cube draw helper
    Handles input using terminal struct's input component

Screen data structure needs Vec<Vec<Character>> due to arrays being fixed at compile-time.
Since you can pattern-match None instead of throwing on access, it could actually work in this language
    method to get subarray or create it if it doesn't exist
        just pattern match Some() to Some(), and None to allocate the vec and return it
    and that's it